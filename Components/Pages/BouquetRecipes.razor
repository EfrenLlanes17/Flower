@page "/bouquetrecipes"
@rendermode InteractiveServer

<PageTitle>Bouquet Recipes</PageTitle>
@using System

<h1>Bouquet Recipes</h1>

<div class="container">
    <!-- Dropdown -->
    <div class="dropdown-container">
        <label for="recipe-select">Select the bouquet you would like to view</label>
        <select id="recipe-select" @bind="BouquetName">
           <option>Select Bouquet</option>
                    @foreach (var option in @GetAllBouquets(ReadTxt()))
                    {
                        <option>@option</option>
                    }
        </select>
    </div>

    @using System.Globalization

    <!-- Main content: Ingredients and Details -->
    <div class="main-content">
        <!-- Ingredients Section -->
        <div class="ingredients">
            <table>
                <thead>
                    <tr>
                        <th>Item</th>
                        <th>Quantity</th>
                    </tr>
                    
                </thead>
                <tbody>
                     @foreach(var bouquetItem in @GetBouquetItems(ReadTxt(),BouquetName)){
                    <tr>
                        <td>@GetItemName(bouquetItem)</td>
                        <td>@GetItemAmount(bouquetItem)</td>
                    
                    </tr>
                   }
                </tbody>
            </table>
        </div>

        <!-- Details Section -->
        <div style="color: #fff; border: ;"class="details">
            <p><strong>Labor Cost:</strong> $@GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"LaborCost"})</p>
            <p><strong>Misc Loss:</strong> $@GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"MiscCost"})</p>
            <p><strong>Total Loaded Cost:</strong> $@(updateTotalCost2(BouquetName) + decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"MiscCost"}), CultureInfo.InvariantCulture) + decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"LaborCost"}), CultureInfo.InvariantCulture))</p>
            <p><strong>Retail Price:</strong> $@GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"RetailPrice"})</p>
            <p><strong>Net Profit:</strong> $@updateNetProfit(BouquetName,GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"RetailPrice"}), ((updateTotalCost2(BouquetName) + decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"MiscCost"}), CultureInfo.InvariantCulture) + decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Bouquets",BouquetName,"LaborCost"}), CultureInfo.InvariantCulture).ToString()) ) )</p>
            
            
        </div>
    </div>

    @* <!-- Add Items -->
    <div class="add-section">
        <label for="add-type">Add a type:</label>
        <select id="add-type">
            <option>Primary</option>
            <option>Secondary</option>
            <option>Misc Fill</option>
            <option>Green</option>
            <option>Gyps</option>
        </select>
        <label for="quantity">Quantity:</label>
        <input id="quantity" type="number" value="1" min="1">
        <button class="add-btn">Add</button>
    </div> *@

    <!-- Delete Button -->
    <button class="delete-btn">Delete Recipe</button>
</div>

@code{

public static string updateTotalCost(string BouquetName2){
    decimal sum = 0; 
    foreach (var bouquetItem in GetBouquetItems2(ReadTxt2(), BouquetName2)) {
         sum += decimal.Parse(GrabFromData2(ReadTxt2(), new string[] { "Flower", GetItemName(bouquetItem), "RetailPrice" }), CultureInfo.InvariantCulture) * @GetItemAmount(bouquetItem);
          } 
          return sum.ToString(CultureInfo.InvariantCulture);
}

public static decimal updateTotalCost2(string BouquetName2){
    decimal sum = 0; 
    foreach (var bouquetItem in GetBouquetItems2(ReadTxt2(), BouquetName2)) {
         sum += decimal.Parse(GrabFromData2(ReadTxt2(), new string[] { "Flower", GetItemName(bouquetItem), "RetailPrice" }), CultureInfo.InvariantCulture) * @GetItemAmount(bouquetItem);
          } 
          return sum;
}
//public decimal totalCost { get; set; } = updateTotalCost();

public string updateNetProfit(string BouquetName2, string retail, string total){
    string unneeded = BouquetName2;
    decimal diff = decimal.Parse(retail) - decimal.Parse(total);
    return diff.ToString(CultureInfo.InvariantCulture);
}

public static string BouquetName { get; set; }

    public List<string> GetAllBouquets(string data)//works
    {
        int startIndex2 = data.IndexOf("<Bouquets>");
        int endIndex2 = data.IndexOf("</Bouquets>") + "</Bouquets>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);
        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;
            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("LaborCost") && !tag.Contains("Bouquets") && !tag.Contains("Amount") && !tag.Contains("MiscCost") && !tag.Contains("RetailPrice") && !tag.Contains("Item")&& !tag.Contains("Items") && !tag.Contains("Name"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }
        return flowerNames;
    }

public List<string> GetBouquetItems(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Items>");
    int purchasesEnd = flowerData.IndexOf("</Items>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No Items found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 7, purchasesEnd - (purchasesStart + 7));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Item>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Item>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 7) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 7;
    }
    return purchases;
}

public static List<string> GetBouquetItems2(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Items>");
    int purchasesEnd = flowerData.IndexOf("</Items>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No Items found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 7, purchasesEnd - (purchasesStart + 7));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Item>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Item>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 7) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 7;
    }
    return purchases;
}

public static string GetItemName(string xml)
{
    string startTag = "<Name>";
    string endTag = "</Name>";

    int startIndex = xml.IndexOf(startTag) + startTag.Length;
    int endIndex = xml.IndexOf(endTag);

    if (startIndex >= 0 && endIndex > startIndex)
    {
        return xml.Substring(startIndex, endIndex - startIndex);
    }

    return null;
}

public static int GetItemAmount(string xml)
{
    string startTag = "<Amount>";
    string endTag = "</Amount>";

    int startIndex = xml.IndexOf(startTag) + startTag.Length;
    int endIndex = xml.IndexOf(endTag);

    if (startIndex >= 0 && endIndex > startIndex)
    {
        string amountString = xml.Substring(startIndex, endIndex - startIndex);
        if (int.TryParse(amountString, out int amount))
        {
            return amount;
        }
    }

    return 0; // Return a default value in case of an error
}


 public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

    public static string ReadTxt2()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }


public string GrabFromData(string data, string[] tags)//Works changed to work with total retail
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "0";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }

    public static string GrabFromData2(string data, string[] tags)//Works changed to work with total retail
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "0";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }

}