@page "/bouquetmaker"
@rendermode InteractiveServer

<PageTitle>Bouquet Maker</PageTitle>
@using System

<h1>Bouquet Maker</h1>

@using System.Linq;

<div class="container">
    <div class="headers">
        <span>Contents</span>
        <span>Amount</span>
        <span>Total Retail</span>
    </div>

@using System.Globalization

    <!-- Data Rows -->
    <div id="data-rows">
        @foreach (var row in Rows)
        {
            <div class="data-row">
                <select  @bind="row.selectedFlower2">
                    <option value="">Select Flower</option>
                    @foreach (var option in @GetAllFlowers(ReadTxt()).OrderBy(option => option))
                    {
                        <option>@option</option>
                    }
                </select>
                <input type="number" placeholder="Amount" min="0" @bind="row.Amount">
                <span>@Convert.ToString(row.Amount * decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Flower",@row.selectedFlower2,"RetailPrice"}),CultureInfo.InvariantCulture))</span>


            </div>
        }
    </div>

    <button @onclick="AddRow">New Line</button>

    <h2>Additional Costs</h2>
    <div class="additional-costs">
        <label>
            Labor Costs: $<input style="margin-left: 40px;"type="number" min="0" placeholder="0.00" step="0.01" @bind="LaborCost">
        </label>
        <label>
            Misc Costs: $<input style="margin-left: 48px;"type="number" min="0" placeholder="0.00" step="0.01" @bind="MiscCost">
        </label>
    </div>

    <h2>Totals</h2>
    <div class="totals">
        <label>
            Bouquet Name: <input style="margin-left: 25px;" type="text" placeholder="Name" @bind="BouquetName">
        </label>
        <div>
            <span>Total Cost: </span>$<span id="totalCostText"> @(getSum(LaborCost)+ LaborCost + MiscCost)</span>
        </div>
        <label>
            Sales Price: $<input style="margin-left: 48px;"type="number" placeholder="0.00" min="0" step="0.01" @bind="RetailPrice">
        </label>
        <div>
            <span>Profit: </span>$<span id="profitText">@Profit</span>
        </div>
    </div>

    Add to Quick View:<input style="margin-left: 15px;"type="checkbox" @bind="isQuickView">

    <h3 class="@errorClass">@ErrorMessage</h3>

    <button @onclick="SaveRecipe">Save To Recipes</button>
</div>

@code{
    public Boolean isQuickView { get; set; }
    public string ErrorMessage { get; set; } = "";

     public string selectedFlower { get; set; } = "";
  public string test { get; set; } = "";

  private string errorClass = "error-red"; 
  private void ChangeColorToGreen() { errorClass = "error-green"; }

  private void ChangeColorToRed() { errorClass = "error-red"; }

  public string GrabFromData(string data, string[] tags)//Works changed to work with total retail
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "0";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }

    public void WriteTxt(string content){
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string path = Path.Combine(desktopPath, fileName);
        
            
        File.WriteAllText(path, content);
           
        
      
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (tag.Substring(0,1) != "/" && !tag.Contains("</") && tag != "Price" && tag != "Amount" && tag != "Purchases" && tag != "Purchase" && tag != "Date" && tag != "Type" && tag != "Flower" && tag != "RetailPrice" && tag != "StemPrice")
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch (Exception ex){
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void OnSelectionChange(ChangeEventArgs e)
  {
      selectedFlower = e.Value?.ToString();
      test = "Bob";
      StateHasChanged();  // Force re-render
  }

}

@code {
    // List of flower options
    private List<string> FlowerOptions = new() { "Rose", "Tulip", "Daisy", "Sunflower" };

    // Row data structure
    public class RowData
    {
        public string selectedFlower2 { get; set; }
        private int amount;

        public int Amount
        {
            get => amount;
            set
            {
                if (value >= 0)
                {
                    amount = value;
                }
                else
                {
                    amount = 0;
                }
            }
        }

        public decimal RetailPrice { get; set; } = 0; // Default price
    }

    // Rows collection
    public List<RowData> Rows = new() { new RowData() };

    // Additional costs
    private decimal laborCost = 0.00m;

    public decimal LaborCost
    {
        get => laborCost;
        set
        {
            if (value >= 0)
            {
                laborCost = value;
            }
            else
            {
                // Optionally, you can throw an exception or handle the negative value in another way
                laborCost = 0.00m;
            }
        }
    }


    
        private decimal miscCost = 0.00m;

    public decimal MiscCost
    {
        get => miscCost;
        set
        {
            if (value >= 0)
            {
                miscCost = value;
            }
            else
            {
                miscCost = 0.00m;
            }
        }
    }


    // Totals
    public string BouquetName { get; set; } = string.Empty;
    private decimal retailPrice = 0.00m;

    public decimal RetailPrice
    {
        get => retailPrice;
        set
        {
            if (value >= 0)
            {
                retailPrice = value;
            }
            else
            {
                retailPrice = 0.00m;
            }
        }
    }


    public decimal TotalCost => getSum(LaborCost) + LaborCost + MiscCost;
    public decimal Profit => RetailPrice - TotalCost;

    public decimal getSum(decimal lc){
        decimal unnded = lc;
        decimal sum = 0;
         foreach(var r in Rows){
        sum += r.Amount * decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Flower",r.selectedFlower2,"StemPrice"}),CultureInfo.InvariantCulture);
        } 
        return sum;
    }

    // Add a new row
    private void AddRow()
    {
        Rows.Add(new RowData());
    }


public string AddNewBouquetItem(string data , string flowerName, string name, string Amount)//works
{
    // Build the new purchase entry
    string newPurchase = $"<Item><Name>{name}</Name><Amount>{Amount}</Amount></Item>";
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return data;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases tag within the flower
    int purchasesStart = flowerData.IndexOf("<Items>");
    int purchasesEnd = flowerData.IndexOf("</Items>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("Items section not found for " + flowerName);
        return data;
    }
    // Insert the new purchase before </Purchases>
    string updatedFlowerData = flowerData.Insert(purchasesEnd, newPurchase);
    // Update the main data string
    return data.Substring(0, flowerStart) + updatedFlowerData + data.Substring(flowerEnd + flowerName.Length + 3);
}

public string AddNewBouquet(string data, string BouquetName, string LaborCost, string MiscCost, string RetailPrice, string itemName,string Amount)//works
{
    string newFlower = $"<{BouquetName}>" +
                       $"<LaborCost>{LaborCost}</LaborCost>" +
                       $"<MiscCost>{MiscCost}</MiscCost>" +
                        $"<RetailPrice>{RetailPrice}</RetailPrice>" +
                       $"<Items>" +
                           $"<Item>" +
                               $"<Name>{itemName}</Name>" +
                               $"<Amount>{Amount}</Amount>" +
                           $"</Item>" +
                       $"</Items>" +
                       $"</{BouquetName}>";
    // Insert the new flower before the closing </Flower> tag
    int insertPosition = data.IndexOf("</Bouquets>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newFlower);
    }
    else
    {
        Console.WriteLine("Error: <Bouquets> tag not found.");
    }
    return data;
}

public string AddNewRecentAction(string data,string type, string name, string amountOrRetail, string costOrAmountofItems, string date)//works
{
    if(type.Equals("Entry")){
    string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<Amount>{amountOrRetail}</Amount>" +
                               $"<Cost>{costOrAmountofItems}</Cost>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
    else{
        string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<RetailPrice>{amountOrRetail}</RetailPrice>" +
                               $"<NumberOfItems>{costOrAmountofItems}</NumberOfItems>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
    return data;
}

    // Save the recipe (placeholder for logic)

public Boolean isInDatabase(string database, string checkingForThis){
if(database.Contains(checkingForThis)){
    return true;
}
else{
    return false;
}
}

    private void SaveRecipe()
    {
        
        if(!string.IsNullOrEmpty(Rows[0].selectedFlower2) && !string.IsNullOrEmpty(BouquetName) && RetailPrice != 0){
            if(isQuickView){
                BouquetName = "$" + BouquetName;
            }
            else{
                 BouquetName = "#" + BouquetName;
            }
            
        // Logic to save the recipe
        if(!isInDatabase(ReadTxt(),BouquetName.Substring(1))){
        var lastItem = Rows.Last(); 
       
        WriteTxt(AddNewBouquet(ReadTxt(), BouquetName, LaborCost.ToString(), MiscCost.ToString(), RetailPrice.ToString(), lastItem.selectedFlower2,lastItem.Amount.ToString()));
         // Print the remaining objects 
         int amountOfItems = 1;
         foreach (var r in Rows.Take(Rows.Count - 1)) {
            amountOfItems +=1;
             WriteTxt(AddNewBouquetItem(ReadTxt(), BouquetName,r.selectedFlower2, r.Amount.ToString()));
             
        }
        WriteTxt(AddNewRecentAction(ReadTxt(),"BouquetEntry", BouquetName, RetailPrice.ToString(), amountOfItems.ToString(), DateTime.Today.ToString("MM/dd/yy", CultureInfo.InvariantCulture)));
        LaborCost = 0;
        MiscCost = 0;
        BouquetName = "";
        RetailPrice = 0;
        isQuickView = false;
        Rows.Clear();
        ChangeColorToGreen();
        ErrorMessage = "Successfully Created Bouquet";
        //TotalCost = 0;
        Rows.Add(new RowData());
        }
        else{
            ChangeColorToRed();
            ErrorMessage = "Invalid Name for Bouquet";
        }
        }
        else{
            ChangeColorToRed();
            ErrorMessage = "Not All Information is filled";
        }
        
    }


    



}