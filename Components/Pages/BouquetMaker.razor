@page "/bouquetmaker"
@rendermode InteractiveServer

<PageTitle>Bouquet Maker</PageTitle>
@using System

<h1>Bouquet Maker</h1>

<div class="container">
    <div class="headers">
        <span>Contents</span>
        <span>Amount</span>
        <span>Total Retail</span>
    </div>

@using System.Globalization

    <!-- Data Rows -->
    <div id="data-rows">
        @foreach (var row in Rows)
        {
            <div class="data-row">
                <select  @bind="row.selectedFlower2">
                    <option>Select Flower</option>
                    @foreach (var option in @GetAllFlowers(ReadTxt()))
                    {
                        <option>@option</option>
                    }
                </select>
                <input type="number" placeholder="Amount" @bind="row.Amount">
                <span>@Convert.ToString(row.Amount * decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Flower",@row.selectedFlower2,"RetailPrice"}),CultureInfo.InvariantCulture))</span>


            </div>
        }
    </div>

    <button @onclick="AddRow">New Line</button>

    <h2>Additional Costs</h2>
    <div class="additional-costs">
        <label>
            Labor Costs: $<input type="number" placeholder="0.00" step="0.01" @bind="LaborCost">
        </label>
        <label>
            Misc Costs: $<input type="number" placeholder="0.00" step="0.01" @bind="MiscCost">
        </label>
    </div>

    <h2>Totals</h2>
    <div class="totals">
        <label>
            Bouquet Name: <input type="text" placeholder="Name" @bind="BouquetName">
        </label>
        <div>
            <span>Total Cost: </span>$<span id="totalCostText"> @(getSum(LaborCost)+ LaborCost + MiscCost)</span>
        </div>
        <label>
            Retail Price: $<input type="number" placeholder="0.00" step="0.01" @bind="RetailPrice">
        </label>
        <div>
            <span>Profit: </span>$<span id="profitText">@Profit</span>
        </div>
    </div>

    <button @onclick="SaveRecipe">Save To Recipes</button>
</div>

@code{

     public string selectedFlower { get; set; } = "";
  public string test { get; set; } = "";

  public string GrabFromData(string data, string[] tags)//Works changed to work with total retail
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "0";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch (Exception ex){
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void OnSelectionChange(ChangeEventArgs e)
  {
      selectedFlower = e.Value?.ToString();
      test = "Bob";
      StateHasChanged();  // Force re-render
  }

}

@code {
    // List of flower options
    private List<string> FlowerOptions = new() { "Rose", "Tulip", "Daisy", "Sunflower" };

    // Row data structure
    public class RowData
    {
        public string selectedFlower2 { get; set; }
        public int Amount { get; set; } = 0;
        public decimal RetailPrice { get; set; } = 0; // Default price
    }

    // Rows collection
    public List<RowData> Rows = new() { new RowData() };

    // Additional costs
    private decimal LaborCost { get; set; } = 0.00m;
    private decimal MiscCost { get; set; } = 0.00m;

    // Totals
    private string BouquetName { get; set; } = string.Empty;
    private decimal RetailPrice { get; set; } = 0.00m;

    private decimal TotalCost => getSum(LaborCost) + LaborCost + MiscCost;
    private decimal Profit => RetailPrice - TotalCost;

    public decimal getSum(decimal lc){
        decimal unnded = lc;
        decimal sum = 0;
         foreach(var r in Rows){
        sum += r.Amount * decimal.Parse(GrabFromData(ReadTxt(),new string[] {"Flower",r.selectedFlower2,"RetailPrice"}),CultureInfo.InvariantCulture);
        } 
        return sum;
    }

    // Add a new row
    private void AddRow()
    {
        Rows.Add(new RowData());
    }

    // Save the recipe (placeholder for logic)
    private void SaveRecipe()
    {
        // Logic to save the recipe

        Console.WriteLine($"Labor Cost: {LaborCost}");
        Console.WriteLine($"Misc Cost: {MiscCost}");
        Console.WriteLine($"Name: {BouquetName}");
        Console.WriteLine($"Total: {TotalCost}");
        Console.WriteLine($"Retail: {RetailPrice}");
        Console.WriteLine($"Profit: {Profit}");
         foreach(var r in Rows){
        Console.WriteLine($"ItemName: {r.selectedFlower2}  Amount: {r.Amount}");
        } 
        Console.WriteLine("Done");
        
    }


    



}