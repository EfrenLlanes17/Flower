@page "/pricecompare"
@rendermode InteractiveServer
<PageTitle>Price Compare</PageTitle>



<h1>Price Compare</h1>

<h3>Select a Flower or Item</h3>

<!-- ADD Flower OPTIONS HERE-->
<form style="display: flex; align-items: center; gap: 10px;">
  <select  @bind="selectedFlower">
    @foreach (var flower in @getFlowerOptions())
        {
            <option value="@flower">@flower</option>
        }
  </select>
</form>


@if (!string.IsNullOrEmpty(selectedFlower))
{
    try{
    <h1>@selectedFlower</h1>
    <h3>Stem Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"StemPrice"})</h3>
    <h3>Retail Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"RetailPrice"})</h3>
    <h3>Type: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"Type"})</h3>
    }
    catch{
         <h1>DatabaseNot found</h1>
    }
}








<!-- Graph goes here >-->



@code{
  public string? selectedFlower { get; set; }
  public string test { get; set; } = "";

  public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "Not Found";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch{
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void OnSelectionChange(ChangeEventArgs e)
{
    selectedFlower = e.Value?.ToString();
    StateHasChanged();  // Force re-render
}

private void OnSelectionChange51()
{
    selectedFlower = "Tulip";
    StateHasChanged();  // Force re-render
}


}

 
@* 
<div>
    <h3>Counter</h3>
    
    <button @onclick="IncrementCount">Click me</button>

    <p>Count is: @currentCount</p>
</div>

@code {
    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
    }
} *@


@using System.Text


<h3>Line Graph with Axes</h3>
@((MarkupString)GenerateSvgContent())

@code {
    public class Point
    {
        public int X { get; set; }
        public int Y { get; set; }
    }

    private List<Point> DataPoints = new List<Point>
    {
        new Point { X = 50, Y = 300 },
        new Point { X = 100, Y = 200 },
        new Point { X = 150, Y = 150 },
        new Point { X = 200, Y = 100 },
        new Point { X = 250, Y = 80 },
        new Point { X = 300, Y = 150 },
        new Point { X = 350, Y = 200 },
        new Point { X = 400, Y = 250 },
        new Point { X = 450, Y = 300 },
        new Point { X = 500, Y = 350 },
        new Point { X = 0, Y = 0 }
    };

    private string GenerateSvgContent()
    {
        var svgContent = new StringBuilder();

        svgContent.Append("<svg width=\"600\" height=\"400\">");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"550\" y2=\"350\" stroke=\"black\" stroke-width=\"2\" />");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"2\" />");

        // X and Y axes labels
        for (int i = 0; i <= 10; i++)
        {
            svgContent.Append($"<text x=\"{50 + (i * 50)}\" y=\"370\" font-size=\"10\" text-anchor=\"middle\">{i * 50}</text>");
            svgContent.Append($"<text x=\"30\" y=\"{350 - (i * 30)}\" font-size=\"10\" text-anchor=\"end\">{i * 30}</text>");
        }

        // Data lines and points
        for (int i = 0; i < DataPoints.Count - 1; i++)
        {
            svgContent.Append($"<line x1=\"{DataPoints[i].X +50}\" y1=\"{350 - DataPoints[i].Y}\" x2=\"{DataPoints[i + 1].X+50}\" y2=\"{350 - DataPoints[i + 1].Y}\" stroke=\"blue\" stroke-width=\"2\" />");
            svgContent.Append($"<circle cx=\"{DataPoints[i].X +50}\" cy=\"{350 - DataPoints[i].Y}\" r=\"5\" fill=\"red\" />");
        }
        svgContent.Append($"<circle cx=\"{DataPoints[DataPoints.Count - 1].X + 50}\" cy=\"{350 - DataPoints[DataPoints.Count - 1].Y}\" r=\"5\" fill=\"red\" />");

        svgContent.Append("</svg>");

        return svgContent.ToString();
    }
}






