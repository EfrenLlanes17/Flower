@page "/pricecompare"
@rendermode InteractiveServer
<PageTitle>Price Compare</PageTitle>



<h1>Price Compare</h1>
@using System.Linq;


<h3>Select a Flower or Item</h3>

<!-- ADD Flower OPTIONS HERE-->
<form style="display: flex; align-items: center; gap: 10px;">
  <select style="width: 20%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" @bind="selectedFlower" >
    <option value="">Select a Flower</option>
    @foreach (var flower in @getFlowerOptions().OrderBy(flower => flower))
        {
            <option value="@flower">@flower</option>
        }
  </select>
</form>


@if (!string.IsNullOrEmpty(selectedFlower))
{
    try{
    <h1>@selectedFlower</h1>
    <h3>Stem Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"StemPrice"})</h3>
    <h3>Retail Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"RetailPrice"})</h3>
    <button style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin-left:35px; margin-right: 10px; margin-top:15px; margin-bottom:15px;font-weight: bold;" @onclick="changeEdtTxtBoxBool">Edit Retail Price</button>
    
    @if (showEdtInput)
    {
        <input type="number" style="width: 10%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" 
            class="input-field" placeholder="Retail Price" @bind="newRetailPrice" min="0" step="0.01">
        
        @if (newRetailPrice < 0)
        {
            newRetailPrice = 0;
        }

        <button class="input-field" 
                style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin:10px; font-weight: bold;" 
                @onclick="changeRetailBtn">
            Save
        </button>
    }

    <h3>Type: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"Type"})</h3>
    DataPoints.Clear();
    foreach (var purchase in @GetFlowerPurchases(ReadTxt(),selectedFlower)){
        try{
        AddDataPoint(GetDate(purchase),GetPrice(purchase));
        }
        catch(Exception e){
            <h1>@e.Message</h1>
        }
        
    }
    if(DataPoints.Count > 1){
    <h4 style="margin-left:35px; margin-top:30px; margin-bottom: -10px; font-weight: bold;">Stem Price Change Over Time</h4>
        <div class="svg-container"> @((MarkupString)GenerateSvgContent()) </div>
        }
    else{
        <h3>Only one Purchase value Avaiable</h3>
    }
    <h4 style="margin-left:35px; margin-top:10px;"><u>All Entries of @selectedFlower</u></h4>
    @* var reversedPurchases =  GetFlowerPurchases(ReadTxt(),selectedFlower);
    reversedPurchases.Reverse(); *@
    foreach (var purchase in DataPoints){
        <h3>Price: @purchase.Y.ToString() Date: @purchase.X.ToShortDateString()</h3>
    }
    }
    catch{
         <h1>DatabaseNot found</h1>
    }
}








<!-- Graph goes here >-->



@code{

    private bool showEditButton = true; // Determines whether the Edit button is shown

  public string? selectedFlower { get; set; }

  public Boolean showEdtInput = false;
  public string test { get; set; } = "";

 private decimal newretailprice = 0.00m;

public decimal newRetailPrice
{
    get => newretailprice;
    set
    {
        if (value >= 0)
        {
            newretailprice = value;
        }
        else
        {
            newretailprice = 0.00m;
        }
    }
}



  public void changeEdtTxtBoxBool(){
    showEdtInput = true;
    showEditButton = false; // Hide Edit button
  }

 public void changeRetailBtn(){
    if(newRetailPrice != 0 ){
    WriteTxt(UpdateData(ReadTxt(),new string[] {"Flower",selectedFlower,"RetailPrice"}, newRetailPrice.ToString()));
    newRetailPrice = 0;
    showEdtInput = false;
    showEditButton = true;
    }
  }

   public string UpdateData(string data,string[] tags, string newValue)//works
{
    int position = 0;  // Start from the beginning of the data
    int startValue = -1;
    int endValue = -1;
    foreach (string tag in tags)
    {
        int start = data.IndexOf("<" + tag + ">", position);
        int end = data.IndexOf("</" + tag + ">", position);
        if (start == -1 || end == -1)
        {
            Console.WriteLine(tag + " tag not found");
            return data;
        }
        if (tag == tags[tags.Length - 1])  // On the final tag
        {
            startValue = start + tag.Length + 2;
            endValue = end;
        }
        else
        {
            position = start + tag.Length + 2;  // Move deeper to next tag section
        }
    }
    if (startValue != -1 && endValue != -1)
    {
        // Perform the update on the original data
        return data.Substring(0, startValue) + newValue + data.Substring(endValue);
       
    }
    return data;
}

  public void WriteTxt(string content){
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string path = Path.Combine(desktopPath, fileName);
        
            
        File.WriteAllText(path, content);
           
        
      
    }

  public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "Not Found";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch{
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void OnSelectionChange(ChangeEventArgs e)
{
    selectedFlower = e.Value?.ToString();
    StateHasChanged();  // Force re-render
}

private void OnSelectionChange51()
{
    selectedFlower = "Tulip";
    StateHasChanged();  // Force re-render
}

public List<string> GetFlowerPurchases(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Purchases>");
    int purchasesEnd = flowerData.IndexOf("</Purchases>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No purchases found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 11, purchasesEnd - (purchasesStart + 11));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Purchase>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Purchase>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 11) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 11;
    }
    return purchases;
}

}

 
@* 
<div>
    <h3>Counter</h3>
    
    <button @onclick="IncrementCount">Click me</button>

    <p>Count is: @currentCount</p>
</div>

@code {
    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
    }
} *@


@using System.Text
@using System.Globalization



@code {
    public class Point
    {
        public DateTime X { get; set; }
        public double Y { get; set; }
    }

    public void AddDataPoint(string newDate,string newValue) { 
        var newPoint = new Point 
        { 
            X = DateTime.Parse(newDate, CultureInfo.InvariantCulture), 
            Y = double.Parse(newValue, CultureInfo.InvariantCulture)}; 
            // Add the new point to the DataPoints list 
            DataPoints.Add(newPoint);
            // Refresh the graph 
            //StateHasChanged();
             }

    public string GetPrice(string xml)
{
    var startTag = "<Price>";
    var endTag = "</Price>";

    var startIndex = xml.IndexOf(startTag) + startTag.Length;
    var endIndex = xml.IndexOf(endTag);

    if (startIndex >= 0 && endIndex > startIndex)
    {
        return xml.Substring(startIndex, endIndex - startIndex);
    }
    
    return null; // Or handle as needed
}

public string GetDate(string xml)
{
    var startTag = "<Date>";
    var endTag = "</Date>";

    var startIndex = xml.IndexOf(startTag) + startTag.Length;
    var endIndex = xml.IndexOf(endTag);

    if (startIndex >= 0 && endIndex > startIndex)
    {
        return xml.Substring(startIndex, endIndex - startIndex);
    }

    return null; // Or handle as needed
}



    public List<Point> DataPoints = new List<Point>
    {
        //data points go here
        //Needs at least two data points to work
       
        @* new Point { X = DateTime.Parse("07/25/23", CultureInfo.InvariantCulture), Y = 5.35},
        new Point { X = DateTime.Parse("08/25/23", CultureInfo.InvariantCulture), Y = 5.05},
        new Point { X = DateTime.Parse("09/25/23", CultureInfo.InvariantCulture), Y = 5.05},
         *@
    };

    private string GenerateSvgContent()
    {
        DataPoints = DataPoints.OrderByDescending(point => point.X).ToList();
        
        var svgContent = new StringBuilder();
        var minDate = DataPoints.Min(p => p.X);
        var maxDate = DataPoints.Max(p => p.X);
        var dateRange = (maxDate - minDate).TotalDays;
        var minY = DataPoints.Min(p => p.Y);
        var maxY = DataPoints.Max(p => p.Y);
        var yRange = maxY - minY;

        svgContent.Append("<svg width=\"600\" height=\"400\">");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"550\" y2=\"350\" stroke=\"black\" stroke-width=\"2\" />");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"2\" />");

        // X and Y axes labels
        for (int i = 0; i <= 10; i++)
        {
            var dateLabel = minDate.AddDays((dateRange / 10) * i).ToString("MM/dd/yy");
            svgContent.Append($"<text x=\"{50 + (i * 50)}\" y=\"370\" font-size=\"11.5\" text-anchor=\"middle\">{dateLabel}</text>");
            svgContent.Append($"<text x=\"40\" y=\"{350 - (i * 30)}\" font-size=\"20\" text-anchor=\"end\">{(minY + i * yRange / 10):0.00}</text>");
        }

        // Data lines and points
        for (int i = 0; i < DataPoints.Count - 1; i++)
        {
            var x1 = 50 + ((DataPoints[i].X - minDate).TotalDays / dateRange) * 500;
            var x2 = 50 + ((DataPoints[i + 1].X - minDate).TotalDays / dateRange) * 500;
            var y1 = 350 - ((DataPoints[i].Y - minY) / yRange) * 300;
            var y2 = 350 - ((DataPoints[i + 1].Y - minY) / yRange) * 300;

            svgContent.Append($"<line x1=\"{x1}\" y1=\"{y1}\" x2=\"{x2}\" y2=\"{y2}\" stroke=\"green\" stroke-width=\"2\" />");
            svgContent.Append($"<circle cx=\"{x1}\" cy=\"{y1}\" r=\"8\" fill=\"purple\" />");
        }
        var lastX = 50 + ((DataPoints.Last().X - minDate).TotalDays / dateRange) * 500;
        var lastY = 350 - ((DataPoints.Last().Y - minY) / yRange) * 300;
        svgContent.Append($"<circle cx=\"{lastX}\" cy=\"{lastY}\" r=\"8\" fill=\"purple\" />");

        svgContent.Append("</svg>");

        return svgContent.ToString();
    }
}


