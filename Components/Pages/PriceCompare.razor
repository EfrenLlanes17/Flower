@page "/pricecompare"
@rendermode InteractiveServer
<PageTitle>Price Compare</PageTitle>



<h1>Price Compare</h1>

<h3>Select a Flower or Item</h3>

<!-- ADD Flower OPTIONS HERE-->
<form style="display: flex; align-items: center; gap: 10px;">
  <select  @bind="selectedFlower">
    @foreach (var flower in @getFlowerOptions())
        {
            <option value="@flower">@flower</option>
        }
  </select>
</form>


@if (!string.IsNullOrEmpty(selectedFlower))
{
    try{
    <h1>@selectedFlower</h1>
    <h3>Stem Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"StemPrice"})</h3>
    <h3>Retail Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"RetailPrice"})</h3>
    <h3>Type: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"Type"})</h3>
    }
    catch{
         <h1>DatabaseNot found</h1>
    }
}








<!-- Graph goes here >-->



@code{
  public string? selectedFlower { get; set; }
  public string test { get; set; } = "";

  public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "Not Found";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch{
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void OnSelectionChange(ChangeEventArgs e)
{
    selectedFlower = e.Value?.ToString();
    StateHasChanged();  // Force re-render
}

private void OnSelectionChange51()
{
    selectedFlower = "Tulip";
    StateHasChanged();  // Force re-render
}


}

 
@* 
<div>
    <h3>Counter</h3>
    
    <button @onclick="IncrementCount">Click me</button>

    <p>Count is: @currentCount</p>
</div>

@code {
    int currentCount = 0;

    void IncrementCount()
    {
        currentCount++;
    }
} *@


@using System.Text
@using System.Globalization

<h3>Line Graph with Axes</h3>
@((MarkupString)GenerateSvgContent())

@code {
    public class Point
    {
        public DateTime X { get; set; }
        public double Y { get; set; }
    }


    private List<Point> DataPoints = new List<Point>
    {
       
        new Point { X = DateTime.Parse("07/25/23", CultureInfo.InvariantCulture), Y = 5.35},
        new Point { X = DateTime.Parse("08/25/23", CultureInfo.InvariantCulture), Y = 5.05},
        
    };

    private string GenerateSvgContent()
    {
        var svgContent = new StringBuilder();
        var minDate = DataPoints.Min(p => p.X);
        var maxDate = DataPoints.Max(p => p.X);
        var dateRange = (maxDate - minDate).TotalDays;
        var minY = DataPoints.Min(p => p.Y);
        var maxY = DataPoints.Max(p => p.Y);
        var yRange = maxY - minY;

        svgContent.Append("<svg width=\"600\" height=\"400\">");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"550\" y2=\"350\" stroke=\"black\" stroke-width=\"2\" />");
        svgContent.Append("<line x1=\"50\" y1=\"350\" x2=\"50\" y2=\"50\" stroke=\"black\" stroke-width=\"2\" />");

        // X and Y axes labels
        for (int i = 0; i <= 10; i++)
        {
            var dateLabel = minDate.AddDays((dateRange / 10) * i).ToString("MM/dd/yy");
            svgContent.Append($"<text x=\"{50 + (i * 50)}\" y=\"370\" font-size=\"10\" text-anchor=\"middle\">{dateLabel}</text>");
            svgContent.Append($"<text x=\"30\" y=\"{350 - (i * 30)}\" font-size=\"10\" text-anchor=\"end\">{(minY + i * yRange / 10):0.00}</text>");
        }

        // Data lines and points
        for (int i = 0; i < DataPoints.Count - 1; i++)
        {
            var x1 = 50 + ((DataPoints[i].X - minDate).TotalDays / dateRange) * 500;
            var x2 = 50 + ((DataPoints[i + 1].X - minDate).TotalDays / dateRange) * 500;
            var y1 = 350 - ((DataPoints[i].Y - minY) / yRange) * 300;
            var y2 = 350 - ((DataPoints[i + 1].Y - minY) / yRange) * 300;

            svgContent.Append($"<line x1=\"{x1}\" y1=\"{y1}\" x2=\"{x2}\" y2=\"{y2}\" stroke=\"blue\" stroke-width=\"2\" />");
            svgContent.Append($"<circle cx=\"{x1}\" cy=\"{y1}\" r=\"5\" fill=\"red\" />");
        }
        var lastX = 50 + ((DataPoints.Last().X - minDate).TotalDays / dateRange) * 500;
        var lastY = 350 - ((DataPoints.Last().Y - minY) / yRange) * 300;
        svgContent.Append($"<circle cx=\"{lastX}\" cy=\"{lastY}\" r=\"5\" fill=\"red\" />");

        svgContent.Append("</svg>");

        return svgContent.ToString();
    }
}


