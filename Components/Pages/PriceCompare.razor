@page "/pricecompare"
@attribute [StreamRendering]

<PageTitle>Price Compare</PageTitle>

<h1>Price Compare</h1>

<h3>Select a Flower or Item</h3>

<!-- ADD Flower OPTIONS HERE-->

<form style="display: flex; align-items: center; gap: 10px;">
  <select @onchange="OnSelectionChange">
    @foreach (var flower in @getFlowerOptions())
        {
            <option value="@flower">@flower</option>
        }
  </select>
</form>

@if (!string.IsNullOrEmpty(selectedFlower))
{
    <h1>@selectedFlower</h1>
    <h3>Stem Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"StemPrice"})</h3>
    <h3>Retail Price: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"RetailPrice"})</h3>
    <h3>Type: @GrabFromData(ReadTxt(),new string[] {"Flower",selectedFlower,"Type"})</h3>
}
else{
<h1>selectedFlower: @selectedFlower</h1>
}
<h1>selectedFlower: @selectedFlower</h1>


<!-- Things after Things point will appear after a Flower is selcted >-->



<!-- Graph goes here >-->

@code{
  public string selectedFlower { get; set; } = "";
  public string test { get; set; } = "";

  public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "Not Found";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";


        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }

 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
    public string[] getFlowerOptions(){
        return GetAllFlowers(ReadTxt()).ToArray();
        
    }

private void OnSelectionChange(ChangeEventArgs e)
  {
      selectedFlower = e.Value?.ToString();
      test = "Bob";
      StateHasChanged();  // Force re-render
  }

}