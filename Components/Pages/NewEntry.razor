@page "/"
@rendermode InteractiveServer
<PageTitle>New Entry</PageTitle>



<h1 style="color: #eb3a9b; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif; margin:35px; font-weight: bold; padding-top: 10px; text-align: left;">Add New Entry</h1>




<input type="date" @bind="selectedDate" style="width: 20%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;">

<button style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin:10px; font-weight: bold;" @onclick="ShowFlower">Add New Flower To Database</button>

@if (showNewFlowerInput)
{
    <input type="text" style="width: 10%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" class="input-field" placeholder="New Flower Name" @bind="newFlowerName"> 
    <input type="text" style="width: 10%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" class="input-field" placeholder="Type" @bind="newFlowerType"> 
    <input type="number" style="width: 10%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" class="input-field" placeholder="Units" @bind="newFlowerUnit" min="0"> 
    <input type="number" placeholder="Cost" style="width: 10%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" class="input-field"  @bind="newFlowerCost" min="0">
    <button class="input-field" style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin:10px; font-weight: bold;" @onclick="AddNewFlowerBtn">
        Save
    </button>
}

@if (showColumnTitles)
{
    <div style="display: grid; grid-template-columns: 1.5fr 1fr 1fr 1fr 1fr 1fr; gap: 10px; align-items: center; width: 100%; box-sizing: border-box; margin-top: 20px;">
        <!-- Column Titles -->
        <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Flowers</h3>
        <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Units</h3>
        <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Cost</h3>
        <h5 style="margin: 0; text-align: center; color: #eb3a9b;">Stem Cost</h5>
        <h5 style="margin: 0; text-align: center; color: #eb3a9b;">Change Since Last Entry</h5>
    </div>
}
<div style="display: grid; grid-template-columns: 1.5fr 1fr 1fr 1fr 1fr 1fr; gap: 10px; align-items: center; width: 100%; box-sizing: border-box; margin-top: 20px;">
    <!-- Column Titles -->
    <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Flowers</h3>
    <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Units</h3>
    <h3 style="margin: 0; text-align: center; color: #eb3a9b;">Cost</h3>
    <h5 style="margin: 0; text-align: center; color: #eb3a9b;">Stem Cost</h5>
    <h5 style="margin: 0; text-align: center; color: #eb3a9b;">Change Since Last Entry</h5>
</div>
@using System.Linq;

<div>
    @foreach (var row in rows)
    {
        <div style="display: grid; grid-template-columns: 1.5fr 1fr 1fr 1fr 1fr 1fr; gap: 10px; align-items: center; width: 100%; box-sizing: border-box; margin-top: 10px;">
            <select style="width: 90%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" @bind="row.SelectedFlower">
                <option value="">Select a flower</option>
                @foreach (var flower in getFlowerOptions().OrderBy(flower => flower))
                {
                    <option value="@flower">@flower</option>
                }
            </select>

            <input type="number" placeholder="Units" style="width: 70%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" @bind="row.Units">
            <input type="number" placeholder="Cost" style="width: 70%; padding: 5px; border: 1px solid #eb3a9b; border-radius: 5px;" @bind="row.Cost">
            <h6 style="text-align: center; color: #eb3a9b; margin: 0;">@row.StemCost.ToString("0.00")</h6>
            <h6 style="text-align: center; color: #eb3a9b; margin: 0;">@row.ChangeSinceLastEntry.ToString("0%")</h6>
        </div>
    }
</div>

<!-- New Line Button -->
<div style="text-align: left;">
    <button style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin:10px; margin-top:20px;" @onclick="AddNewRow">New Line</button>
</div>

<!-- Save Button -->
<div style="text-align: left;">
    <button style="background-color: #eb3a9b; color: white; padding: 10px 20px; border: none; border-radius: 5px; font-size: 16px; margin:10px;" @onclick="SaveEntries">Save</button>
</div>

<h1 class="@errorClass">@ErrorMessage</h1>
@using System.Globalization

@code{
    private bool showColumnTitles = false;  // Controls visibility of the column titles
  public Boolean showNewFlowerInput = false;

  private decimal? _newFlowerCost;

public decimal? newFlowerCost
{
    get => _newFlowerCost;
    set
    {
        if (value >= 0)
        {
            _newFlowerCost = value;
        }
        else
        {
            _newFlowerCost = 0.00m;
        }
    }
}

  private decimal? _newFlowerUnit;

public decimal? newFlowerUnit
{
    get => _newFlowerUnit;
    set
    {
        if (value >= 0)
        {
            _newFlowerUnit = value;
        }
        else
        {
            _newFlowerUnit = 0;
        }
    }
}


 


  public string newFlowerName { get; set; } = "";

   public string newFlowerType { get; set; } = "";

  public string ErrorMessage { get; set; } = "";

  public DateTime selectedDate { get; set; } = DateTime.Today;
  public string selectedFlower { get; set; } ="";
  public string test { get; set; } = "";

  private string errorClass = "error-red"; 
  private void ChangeColorToGreen() { errorClass = "error-green"; }

  private void ChangeColorToRed() { errorClass = "error-red"; }

  public void ShowFlower(){
    showNewFlowerInput = true;
    showColumnTitles = false;
  }

  public void AddNewFlowerBtn(){
    if(newFlowerCost != 0 && newFlowerCost != 0 && !string.IsNullOrEmpty(newFlowerName) && !string.IsNullOrEmpty(newFlowerType)){
    WriteTxt(AddNewFlower(ReadTxt(), newFlowerName, newFlowerType, (newFlowerCost/newFlowerUnit).ToString(), selectedDate.ToString("MM/dd/yy", CultureInfo.InvariantCulture)));
    newFlowerName = "";
    newFlowerType = "";
    newFlowerCost = 0;
    newFlowerUnit = 0;
    ChangeColorToGreen();
    ErrorMessage = "Succesfully Added New Flower To Database";
    showNewFlowerInput = false; // Hide the input form
    //showColumnTitles = true;   // Show the column titles
    }
    else{
         ChangeColorToRed();
         ErrorMessage = "Not All New Flower Infomation is filled";
    }
  }

  public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "1";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }

  public string AddNewFlower(string data, string flowerName, string type, string price, string date)     //Works
{
    string newFlower = $"<{flowerName}>" +
                       $"<RetailPrice>{price}</RetailPrice>" + //Retail price is initally set as the lastest price
                       $"<StemPrice>{price}</StemPrice>" +      //Stem price is initally set as the lastest price
                       $"<Type>{type}</Type>" +
                       $"<Purchases>" +
                           $"<Purchase>" +
                               $"<Price>{price}</Price>" +
                               $"<Date>{date}</Date>" +
                           $"</Purchase>" +
                       $"</Purchases>" +
                       $"</{flowerName}>";
    // Insert the new flower before the closing </Flower> tag
    int insertPosition = data.IndexOf("</Flower>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newFlower);
    }
    else
    {
        return data;
    }
}
  public string ReadTxt()
    {
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
    }


 public List<string> GetAllFlowers(string data)//works
    {

        int startIndex2 = data.IndexOf("<Flower>");
        int endIndex2 = data.IndexOf("</Flower>") + "</Flower>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);

        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;

            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (!tag.Contains("/") && !tag.Contains("Price") && !tag.Contains("Amount") && !tag.Contains("Purchases") && !tag.Contains("Purchase") && !tag.Contains("Date")&& !tag.Contains("Type") && !tag.Contains("Flower"))
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }

        return flowerNames;
    }
public string[] getFlowerOptions(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetAllFlowers(ReadTxt()).ToArray();
        }
        catch (Exception ex){
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

private void HandleChange(ChangeEventArgs e)
    {
        selectedFlower = e.Value.ToString();
        StateHasChanged();
    }


@code {
    private List<EntryRow> rows = new List<EntryRow> { new EntryRow() };

    private void AddNewRow()
    {
        rows.Add(new EntryRow());
    }

    private void SaveEntries()
    {
        if(!string.IsNullOrEmpty(rows[0].SelectedFlower) && rows[0].Units.HasValue && rows[0].Cost.HasValue){
        foreach(var r in rows){
        if(!string.IsNullOrEmpty(r.SelectedFlower) && r.Units.HasValue && r.Cost.HasValue){
        WriteTxt(AddNewFlowerPurchase(ReadTxt(), r.SelectedFlower, r.StemCost.ToString(), selectedDate.ToString("MM/dd/yy", CultureInfo.InvariantCulture)));
        WriteTxt(AddNewRecentAction(ReadTxt(),"Entry", r.SelectedFlower, r.Units.ToString(), r.Cost.ToString(), selectedDate.ToString("MM/dd/yy", CultureInfo.InvariantCulture)));
        WriteTxt(UpdateData(ReadTxt(),new string[] {"Flower",r.SelectedFlower, "StemPrice"}, r.StemCost.ToString()));
        ChangeColorToGreen();
        ErrorMessage = "Succesfully Added Entries To Database";
        }
        else{
            ChangeColorToRed();
            ErrorMessage = "Missing Infomormation in Entry, Redo Entries";
        }
        }
        rows.Clear();
        rows.Add(new EntryRow());

        }
        else{
            ChangeColorToRed();
            ErrorMessage = "Not All Infomation is filled";
        }
    }

public string AddNewRecentAction(string data,string type, string name, string amountOrRetail, string costOrAmountofItems, string date)//works
{
    if(type.Equals("Entry")){
    string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<Amount>{amountOrRetail}</Amount>" +
                               $"<Cost>{costOrAmountofItems}</Cost>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
    else{
        string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<RetailPrice>{amountOrRetail}</RetailPrice>" +
                               $"<NumberOfItems>{costOrAmountofItems}</NumberOfItems>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        return data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
    return data;
}

    private IEnumerable<string> getsFlowerOptions()
    {
        return new List<string> { "Rose", "Tulip", "Lily", "Daisy" };
    }

    

    private class EntryRow
    {
        public string? SelectedFlower { get; set; }

        private int? units;

        public int? Units
        {
            get => units;
            set
            {
                if (value >= 0)
                {
                    units = value;
                }
                else
                {
                    units = 0;
                }
            }
        }

        


        private decimal? cost;

                public decimal? Cost
                {
                    get => cost;
                    set
                    {
                        if (value >= 0)
                        {
                            cost = value;
                        }
                        else
                        {
                            cost = 0;
                        }
                    }
                }

        public decimal StemCost => Units.HasValue && Cost.HasValue ? Cost.Value / Units.Value : 0;
        public decimal ChangeSinceLastEntry => Units.HasValue && Cost.HasValue && !string.IsNullOrEmpty(SelectedFlower)? ((StemCost/decimal.Parse(GrabFromData2(ReadTxt2(),new string[] {"Flower",SelectedFlower,"StemPrice"}), CultureInfo.InvariantCulture)-1)) : 0;// Placeholder for actual calculation

        

    }

public static string GrabFromData2(string data, string[] tags)//Works
    {
        try{
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");
 
            if (start == -1 || end == -1)
                return "1";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
        }
        catch{
            return "1.0";
        }
    }


public string AddNewFlowerPurchase(string data, string flowerName, string price, string date)//works
{
    // Build the new purchase entry
    //Needs to update retail price
    string newPurchase = $"<Purchase><Price>{price}</Price><Date>{date}</Date></Purchase>";
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return data;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases tag within the flower
    int purchasesStart = flowerData.IndexOf("<Purchases>");
    int purchasesEnd = flowerData.IndexOf("</Purchases>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("Purchases section not found for " + flowerName);
        return data;
    }
    // Insert the new purchase before </Purchases>
    string updatedFlowerData = flowerData.Insert(purchasesEnd, newPurchase);
    // Update the main data string
    return data.Substring(0, flowerStart) + updatedFlowerData + data.Substring(flowerEnd + flowerName.Length + 3);
}

  public static string ReadTxt2()
    {
        try{
         List<string[]> csvData2 = new List<string[]>();
        //change this as needed
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string filePath = Path.Combine(desktopPath, fileName);
        //string filePath = "C:\\Users\\efren\\OneDrive\\Desktop\\FlowerProjectData.txt";
        //change this

        using (StreamReader reader = new StreamReader(filePath)){
                string line;
                while ((line = reader.ReadLine()) != null){
                    string[] fields = line.Split(',');
                    csvData2.Add(fields);
                }
            }

        foreach (var row in csvData2)
        {
            return string.Join(",", row) + "\n";
        }
        return "";
        }
        catch{
            return "<Flower><Eucalyptus, Blue><RetailPrice>1.30</RetailPrice><StemPrice>1.25</StemPrice><Type>Greens</Type><Purchases><Purchase><Price>1.25</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.55</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.30</Price><Date>12/23/24</Date></Purchase></Purchases></Eucalyptus, Blue><Eucalyptus, Seeded><RetailPrice>1.20</RetailPrice><StemPrice>1.15</StemPrice><Type>Greens</Type><Purchases><Purchase><Price>1.15</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.20</Price><Date>12/23/24</Date></Purchase></Purchases></Eucalyptus, Seeded><Gyp Import, Baby Breath><RetailPrice>2.35</RetailPrice><StemPrice>2.30</StemPrice><Type>Greens</Type><Purchases><Purchase><Price>2.30</Price><Date>06/23/23</Date></Purchase><Purchase><Price>2.50</Price><Date>06/23/24</Date></Purchase><Purchase><Price>2.35</Price><Date>12/23/24</Date></Purchase></Purchases></Gyp Import, Baby Breath><Israeli Ruscus><RetailPrice>1.09</RetailPrice><StemPrice>1.04</StemPrice><Type>Greens</Type><Purchases><Purchase><Price>1.04</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.74</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.09</Price><Date>12/23/24</Date></Purchase></Purchases></Israeli Ruscus><Italian Ruscus><RetailPrice>2.15</RetailPrice><StemPrice>2.10</StemPrice><Type>Greens</Type><Purchases><Purchase><Price>2.10</Price><Date>06/23/23</Date></Purchase><Purchase><Price>2.76</Price><Date>06/23/24</Date></Purchase><Purchase><Price>2.15</Price><Date>12/23/24</Date></Purchase></Purchases></Italian Ruscus><Mysty><RetailPrice>2.05</RetailPrice><StemPrice>2.00</StemPrice><Type>Fill</Type><Purchases><Purchase><Price>2.00</Price><Date>06/23/23</Date></Purchase><Purchase><Price>2.05</Price><Date>12/23/24</Date></Purchase></Purchases></Mysty><Basket,12in Dbl Peanut><RetailPrice>9.25</RetailPrice><StemPrice>9.20</StemPrice><Type>Material</Type><Purchases><Purchase><Price>9.20</Price><Date>06/23/23</Date></Purchase><Purchase><Price>9.20</Price><Date>06/23/24</Date></Purchase><Purchase><Price>9.25</Price><Date>12/23/24</Date></Purchase></Purchases></Basket,12in Dbl Peanut><Basket,6in White><RetailPrice>5.46</RetailPrice><StemPrice>5.41</StemPrice><Type>Material</Type><Purchases><Purchase><Price>5.41</Price><Date>06/23/23</Date></Purchase><Purchase><Price>5.46</Price><Date>12/23/24</Date></Purchase></Purchases></Basket,6in White><Box, Shipping><RetailPrice>1.10</RetailPrice><StemPrice>1.05</StemPrice><Type>Material</Type><Purchases><Purchase><Price>1.05</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.10</Price><Date>12/23/24</Date></Purchase></Purchases></Box, Shipping><Card Sticks><RetailPrice>0.16</RetailPrice><StemPrice>0.10</StemPrice><Type>Material</Type><Purchases><Purchase><Price>0.10</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.14</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.16</Price><Date>12/23/24</Date></Purchase></Purchases></Card Sticks><Liquid Crowning Spray (240 vases)><RetailPrice>0.10</RetailPrice><StemPrice>0.05</StemPrice><Type>Material</Type><Purchases><Purchase><Price>0.05</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.10</Price><Date>12/23/24</Date></Purchase></Purchases></Liquid Crowning Spray (240 vases)><Oasis Foam><RetailPrice>0.95</RetailPrice><StemPrice>0.9</StemPrice><Type>Material</Type><Purchases><Purchase><Price>0.9</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.95</Price><Date>12/23/24</Date></Purchase></Purchases></Oasis Foam><Powder, Crystal Clear 300 (320 Packs)><RetailPrice>0.19</RetailPrice><StemPrice>0.14</StemPrice><Type>Material</Type><Purchases><Purchase><Price>0.14</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.16</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.19</Price><Date>12/23/24</Date></Purchase></Purchases></Powder, Crystal Clear 300 (320 Packs)><#9 Sheer Ribbon><RetailPrice>0.28</RetailPrice><StemPrice>0.22</StemPrice><Type>Material</Type><Purchases><Purchase><Price>0.22</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.43</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.28</Price><Date>12/23/24</Date></Purchase></Purchases></#9 Sheer Ribbon><Vase 8 5/8in Std clear><RetailPrice>4.01</RetailPrice><StemPrice>4.01</StemPrice><Type>Material</Type><Purchases><Purchase><Price>4.01</Price><Date>06/23/24</Date></Purchase></Purchases></Vase 8 5/8in Std clear><Vase 10 5/8in Std clear><RetailPrice>4.29</RetailPrice><StemPrice>4.24</StemPrice><Type>Material</Type><Purchases><Purchase><Price>4.24</Price><Date>06/23/23</Date></Purchase><Purchase><Price>5.23</Price><Date>06/23/24</Date></Purchase><Purchase><Price>4.29</Price><Date>12/23/24</Date></Purchase></Purchases></Vase 10 5/8in Std clear><Vase 8in ORCHARD Color><RetailPrice>4.58</RetailPrice><StemPrice>4.53</StemPrice><Type>Material</Type><Purchases><Purchase><Price>4.53</Price><Date>06/23/23</Date></Purchase><Purchase><Price>4.58</Price><Date>12/23/24</Date></Purchase></Purchases></Vase 8in ORCHARD Color><Vase 9.25in Std clear><RetailPrice>3.33</RetailPrice><StemPrice>3.27</StemPrice><Type>Material</Type><Purchases><Purchase><Price>3.27</Price><Date>06/23/23</Date></Purchase><Purchase><Price>3.33</Price><Date>12/23/24</Date></Purchase></Purchases></Vase 9.25in Std clear><Delphinium><RetailPrice>1.60</RetailPrice><StemPrice>1.55</StemPrice><Type>Premium Flower</Type><Purchases><Purchase><Price>1.55</Price><Date>06/23/23</Date></Purchase><Purchase><Price>2.40</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.60</Price><Date>12/23/24</Date></Purchase></Purchases></Delphinium><Lily, Oriental Color><RetailPrice>3.60</RetailPrice><StemPrice>3.55</StemPrice><Type>Premium Flower</Type><Purchases><Purchase><Price>3.55</Price><Date>06/23/23</Date></Purchase><Purchase><Price>3.60</Price><Date>12/23/24</Date></Purchase></Purchases></Lily, Oriental Color><Lily, Oriental White><RetailPrice>3.60</RetailPrice><StemPrice>3.55</StemPrice><Type>Premium Flower</Type><Purchases><Purchase><Price>3.55</Price><Date>06/23/23</Date></Purchase><Purchase><Price>3.60</Price><Date>12/23/24</Date></Purchase></Purchases></Lily, Oriental White><Peonies><RetailPrice>8.85</RetailPrice><StemPrice>8.80</StemPrice><Type>Premium Flower</Type><Purchases><Purchase><Price>8.80</Price><Date>06/23/23</Date></Purchase><Purchase><Price>8.85</Price><Date>12/23/24</Date></Purchase></Purchases></Peonies><Snapdraggons><RetailPrice>1.74</RetailPrice><StemPrice>1.69</StemPrice><Type>Premium Flower</Type><Purchases><Purchase><Price>1.69</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.74</Price><Date>12/23/24</Date></Purchase></Purchases></Snapdraggons><Hydrangea, Blue/White><RetailPrice>3.25</RetailPrice><StemPrice>3.25</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>3.25</Price><Date>06/23/23</Date></Purchase></Purchases></Hydrangea, Blue/White><Hydrangea, mini><RetailPrice>1.84</RetailPrice><StemPrice>1.79</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>1.79</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.84</Price><Date>12/23/24</Date></Purchase></Purchases></Hydrangea, mini><Roses - Freedom Premium><RetailPrice>1.81</RetailPrice><StemPrice>1.76</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>1.76</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.81</Price><Date>12/23/24</Date></Purchase><Purchase><Price>1.81</Price><Date>12/23/24</Date></Purchase></Purchases></Roses - Freedom Premium><Roses - Freedom Premium><RetailPrice>1.76</RetailPrice><StemPrice>1.76</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>1.76</Price><Date>06/23/23</Date></Purchase></Purchases></Roses - Freedom Premium><Roses - Freedom Std><RetailPrice>1.47</RetailPrice><StemPrice>1.42</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>1.42</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.52</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.47</Price><Date>12/23/24</Date></Purchase></Purchases></Roses - Freedom Std><Roses - Imported><RetailPrice>1.70</RetailPrice><StemPrice>1.65</StemPrice><Type>Primary Flower</Type><Purchases><Purchase><Price>1.65</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.76</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.70</Price><Date>12/23/24</Date></Purchase></Purchases></Roses - Imported><Carnations, Mini><RetailPrice>0.88</RetailPrice><StemPrice>0.82</StemPrice><Type>Secondary Flower</Type><Purchases><Purchase><Price>0.82</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.77</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.88</Price><Date>12/23/24</Date></Purchase></Purchases></Carnations, Mini><Carnations, South Amer><RetailPrice>0.59</RetailPrice><StemPrice>0.54</StemPrice><Type>Secondary Flower</Type><Purchases><Purchase><Price>0.54</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.74</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.59</Price><Date>12/23/24</Date></Purchase></Purchases></Carnations, South Amer><Mums Cremon Disbud or White ZONAR><RetailPrice>1.50</RetailPrice><StemPrice>1.45</StemPrice><Type>Secondary Flower</Type><Purchases><Purchase><Price>1.45</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.67</Price><Date>06/23/24</Date></Purchase><Purchase><Price>1.50</Price><Date>12/23/24</Date></Purchase></Purchases></Mums Cremon Disbud or White ZONAR><Mums, Pompon><RetailPrice>0.72</RetailPrice><StemPrice>0.66</StemPrice><Type>Secondary Flower</Type><Purchases><Purchase><Price>0.66</Price><Date>06/23/23</Date></Purchase><Purchase><Price>0.74</Price><Date>06/23/24</Date></Purchase><Purchase><Price>0.72</Price><Date>12/23/24</Date></Purchase></Purchases></Mums, Pompon><Mums, Spider><RetailPrice>1.26</RetailPrice><StemPrice>1.21</StemPrice><Type>Secondary Flower</Type><Purchases><Purchase><Price>1.21</Price><Date>06/23/23</Date></Purchase><Purchase><Price>1.26</Price><Date>12/23/24</Date></Purchase></Purchases></Mums, Spider></Flower><Object></Object><RecentActions></RecentActions><Bouquets></Bouquets>";
        }
    }

 public void WriteTxt(string content){
        string fileName = "FlowerProjectData.txt"; 
        string desktopPath = Environment.GetFolderPath(Environment.SpecialFolder.Desktop); 
        string path = Path.Combine(desktopPath, fileName);
        
            
        File.WriteAllText(path, content);
           
        
      
    }

  public string UpdateData(string data,string[] tags, string newValue)//works
{
    int position = 0;  // Start from the beginning of the data
    int startValue = -1;
    int endValue = -1;
    foreach (string tag in tags)
    {
        int start = data.IndexOf("<" + tag + ">", position);
        int end = data.IndexOf("</" + tag + ">", position);
        if (start == -1 || end == -1)
        {
            Console.WriteLine(tag + " tag not found");
            return data;
        }
        if (tag == tags[tags.Length - 1])  // On the final tag
        {
            startValue = start + tag.Length + 2;
            endValue = end;
        }
        else
        {
            position = start + tag.Length + 2;  // Move deeper to next tag section
        }
    }
    if (startValue != -1 && endValue != -1)
    {
        // Perform the update on the original data
        return data.Substring(0, startValue) + newValue + data.Substring(endValue);
       
    }
    return data;
}
    
    }
}