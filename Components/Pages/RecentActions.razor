@page "/recentactions"
@rendermode InteractiveServer

<PageTitle>Recent Actions</PageTitle>

@using System.Xml.Linq;



@try{

@foreach (var flower in @getRecentActionsIntegrate())
        {
            
            Entries.Insert(0,new Entry { Name = RecentActionFirstItem(flower), Quantity = RecentActionSecondItem(flower), Price = RecentActionThirdItem(flower), Date = RecentActionDateItem(flower) });
        }
}
catch (Exception ex) {
     }

<h1>Recent Actions</h1>

<h2 class="@errorClass">@ErrorMessage</h2>
<div id="entries">

    
    
    @foreach (var entry in Entries)
    {
        if(isInFlower(ReadTxt(),entry.Name)){
        <div class="entry">
            <button class="undo-button" style="background-color: #eb3a9b; color: white; padding: 8px 15px; border: none; border-radius: 5px; font-weight: bold; font-size: 14px; margin-left:35px; margin-top:15px;" @onclick="() => RemoveEntry(entry)">Undo</button>
            <span class="flower-name">@entry.Name</span>
            <span class="quantity">@entry.Quantity</span>
            <span class="price">@entry.Price</span>
            <span class="date">@entry.Date</span>
        </div>
        }
        else{
            <div class="entry">
            <button class="undo-button" style="background-color: #eb3a9b; color: white; padding: 8px 15px; border: none; border-radius: 5px; font-weight: bold; font-size: 14px; margin-left:35px; margin-top:15px;" @onclick="() => RemoveEntry(entry)">Undo</button>
            <span class="flower-name">@entry.Name.Substring(1)</span>
            <span class="quantity">@entry.Quantity</span>
            <span class="price">@entry.Price</span>
            <span class="date">@entry.Date</span>
        </div>
        }
    }
</div>


@code {
    public Entry selectedEntry = null;

    private string errorClass = "error-red"; 

    public string ErrorMessage { get; set; } = "";
    
    public List<Entry> Entries = new List<Entry>
    {
        @* new Entry { Name = "Rose", Quantity = 4, Price = "$4.23", Date = "12/22/24" },
        new Entry { Name = "Rose", Quantity = 5, Price = "$4.23", Date = "12/22/24" },
        new Entry { Name = "Rose", Quantity = 4, Price = "$4.23", Date = "12/22/24" }, *@
        // Add more entries here
    };

    private void RemoveEntry(Entry entry)
    {
        try{
        if(!GetAllBouquets(ReadTxt()).Contains(entry.Name) ){
         if( GetFlowerPurchases(ReadTxt(),entry.Name).Count != 1){
         
        WriteTxt(RemoveRecentAction(ReadTxt(),entry.Name, entry.Quantity, entry.Price, entry.Date));//fix error
        WriteTxt(RemoveFlowerPurchase(UpdateData2(ReadTxt2(),new string[] {"Flower",entry.Name, "StemPrice"}, GetPrice(GetFlowerPurchases2(ReadTxt2(),entry.Name).OrderBy(purchase =>
        {
            var xml = XElement.Parse(purchase);
            var dateString = xml.Element("Date")?.Value; // Extract the date string
            return DateTime.Parse(dateString);          // Parse it as a DateTime
        }).ToList().ElementAt(GetFlowerPurchases2(ReadTxt2(),entry.Name).Count -1))),entry.Name, entry.Date) );

        // does not update stemprice after removal
        Entries.Remove(entry);
        StateHasChanged(); 
        // Notify Blazor of the state change
        }
        else{
            ChangeColorToRed();
         ErrorMessage= "Cannot Remove Only Purchase of Flower, Add New Flower Purchase or Delete flower";
        }

        }
        else{
            WriteTxt(RemoveRecentAction(ReadTxt(),entry.Name, entry.Quantity, entry.Price, entry.Date));
        // does not update stemprice after removal
        Entries.Remove(entry);
        StateHasChanged(); 
        }
        }
        catch{
            
        }
    }

    public List<string> GetFlowerPurchases(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Purchases>");
    int purchasesEnd = flowerData.IndexOf("</Purchases>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No purchases found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 11, purchasesEnd - (purchasesStart + 11));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Purchase>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Purchase>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 11) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 11;
    }
    return purchases;
}

public List<string> GetAllBouquets(string data)//works
    {
        int startIndex2 = data.IndexOf("<Bouquets>");
        int endIndex2 = data.IndexOf("</Bouquets>") + "</Bouquets>".Length; // End after </Object>
        string usingData = data;
        
    
        usingData = data.Substring(startIndex2, endIndex2 - startIndex2);
        List<string> flowerNames = new List<string>();
        int startIndex = 0;
        
        while ((startIndex = usingData.IndexOf("<", startIndex)) != -1)
        {
            int endIndex = usingData.IndexOf(">", startIndex);
            if (endIndex == -1) break;
            string tag = usingData.Substring(startIndex + 1, endIndex - startIndex - 1);
            
            if (tag.Substring(0,1) != "/" && !tag.Contains("</") && tag != "LaborCost" && tag != "Bouquets" && tag != "Bouquet" && tag != "Amount" && tag != "MiscCost" && tag != "RetailPrice" && tag != "Item" && tag != "Items" &&  tag != "Name")
            {
                flowerNames.Add(tag);
            }
            startIndex = endIndex + 1;
        }
        return flowerNames;
    }

      private void ChangeColorToGreen() { errorClass = "error-green"; }

  private void ChangeColorToRed() { errorClass = "error-red"; }

    public Boolean isInFlower(string database, string checkingForThis){

    int bouquetsStart = database.IndexOf("<Flower>");
    int bouquetsEnd = database.IndexOf("</Flower>");

    if (bouquetsStart == -1 || bouquetsEnd == -1)
    {
        return false;
    }

    // Extract the Bouquets section
    database = database.Substring(bouquetsStart, (bouquetsEnd - bouquetsStart) + "</Flower>".Length);
if(database.Contains(checkingForThis)){
    return true;
}
else{
    return false;
}
}

     public string UpdateData(string data,string[] tags, string newValue)//works
{
    int position = 0;  // Start from the beginning of the data
    int startValue = -1;
    int endValue = -1;
    foreach (string tag in tags)
    {
        int start = data.IndexOf("<" + tag + ">", position);
        int end = data.IndexOf("</" + tag + ">", position);
        if (start == -1 || end == -1)
        {
            Console.WriteLine(tag + " tag not found");
            return data;
        }
        if (tag == tags[tags.Length - 1])  // On the final tag
        {
            startValue = start + tag.Length + 2;
            endValue = end;
        }
        else
        {
            position = start + tag.Length + 2;  // Move deeper to next tag section
        }
    }
    if (startValue != -1 && endValue != -1)
    {
        // Perform the update on the original data
        return data.Substring(0, startValue) + newValue + data.Substring(endValue);
       
    }
    return data;
}

 public static string UpdateData2(string data,string[] tags, string newValue)//works
{
    int position = 0;  // Start from the beginning of the data
    int startValue = -1;
    int endValue = -1;
    foreach (string tag in tags)
    {
        int start = data.IndexOf("<" + tag + ">", position);
        int end = data.IndexOf("</" + tag + ">", position);
        if (start == -1 || end == -1)
        {
            Console.WriteLine(tag + " tag not found");
            return data;
        }
        if (tag == tags[tags.Length - 1])  // On the final tag
        {
            startValue = start + tag.Length + 2;
            endValue = end;
        }
        else
        {
            position = start + tag.Length + 2;  // Move deeper to next tag section
        }
    }
    if (startValue != -1 && endValue != -1)
    {
        // Perform the update on the original data
        return data.Substring(0, startValue) + newValue + data.Substring(endValue);
       
    }
    return data;
}

    public class Entry
    {
        public string Name { get; set; }
        public string Quantity { get; set; }
        public string Price { get; set; }
        public string Date { get; set; }
    }

public void AddNewRecentAction(string data,string type, string name, string amountOrRetail, string costOrAmountofItems, string date)//works
{
    if(type.Equals("Entry")){
    string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<Amount>{amountOrRetail}</Amount>" +
                               $"<Cost>{costOrAmountofItems}</Cost>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        data = data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
    else{
        string newObject = $"<{type}>" +
                               $"<Name>{name}</Name>" +
                               $"<RetailPrice>{amountOrRetail}</RetailPrice>" +
                               $"<NumberOfItems>{costOrAmountofItems}</NumberOfItems>" +
                               $"<Date>{date}</Date>" +
                       $"</{type}>";
    
    int insertPosition = data.IndexOf("</RecentActions>");
    if (insertPosition != -1)
    {
        data = data.Insert(insertPosition, newObject);
    }
    else
    {
        Console.WriteLine("Error: <RecentActions> tag not found.");
    }
    }
}

 public static string GetPrice(string xml)
{
    var startTag = "<Price>";
    var endTag = "</Price>";

    var startIndex = xml.IndexOf(startTag) + startTag.Length;
    var endIndex = xml.IndexOf(endTag);

    if (startIndex >= 0 && endIndex > startIndex)
    {
        return xml.Substring(startIndex, endIndex - startIndex);
    }
    
    return null; // Or handle as needed
}

public static string RemoveRecentAction(string xml, string name, string amountOrRetail, string costOrAmountofItems, string date) {
     if (xml.Contains("<Entry><Name>" + name)) {
                 xml = RemoveFlowerPurchase(UpdateData2(ReadTxt2(),new string[] {"Flower",name, "StemPrice"}, GetPrice(GetFlowerPurchases2(ReadTxt2(),name).ElementAt(GetFlowerPurchases2(ReadTxt2(),name).Count -2))),name, date); 
                 //WriteTxt2();
                 
                 } 
                 else if (xml.Contains("<BouquetEntry><Name>" + name)) {
                xml = RemoveBouquet(xml,name); 
               
                     }
     string[] possibleEntries = { $"<Entry><Name>{name}</Name><Amount>{amountOrRetail}</Amount><Cost>{costOrAmountofItems}</Cost><Date>{date}</Date></Entry>", $"<BouquetEntry><Name>{name}</Name><RetailPrice>{amountOrRetail}</RetailPrice><NumberOfItems>{costOrAmountofItems}</NumberOfItems><Date>{date}</Date></BouquetEntry>" }; 
     foreach (string entry in possibleEntries) { 
        int startIndex = xml.IndexOf(entry); 
        if (startIndex != -1) {
             int endIndex = startIndex + entry.Length;
              xml = xml.Remove(startIndex, endIndex - startIndex); 
             break; // Remove only the first matching entry 
             } 
             } 
             //return xml;
            return xml;

           
              }


public static List<string> GetFlowerPurchases2(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
        Console.WriteLine(flowerName + " not found");
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Purchases>");
    int purchasesEnd = flowerData.IndexOf("</Purchases>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No purchases found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 11, purchasesEnd - (purchasesStart + 11));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Purchase>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Purchase>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 11) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 11;
    }
    return purchases;
}

public List<string> GetBouquetItems(string data,string flowerName)//works
{
    List<string> purchases = new List<string>();
    // Find the flower tag
    int flowerStart = data.IndexOf("<" + flowerName + ">");
    int flowerEnd = data.IndexOf("</" + flowerName + ">");
    if (flowerStart == -1 || flowerEnd == -1)
    {
       
        return purchases;
    }
    // Extract the flower's content
    string flowerData = data.Substring(flowerStart, (flowerEnd + flowerName.Length + 3) - flowerStart);
    // Find the Purchases section
    int purchasesStart = flowerData.IndexOf("<Items>");
    int purchasesEnd = flowerData.IndexOf("</Items>");
    if (purchasesStart == -1 || purchasesEnd == -1)
    {
        Console.WriteLine("No Items found for " + flowerName);
        return purchases;
    }
    // Extract the Purchases section
    string purchasesSection = flowerData.Substring(purchasesStart + 7, purchasesEnd - (purchasesStart + 7));
    // Loop to find all <Purchase> tags
    int purchaseStart = 0;
    while ((purchaseStart = purchasesSection.IndexOf("<Item>", purchaseStart)) != -1)
    {
        int purchaseEnd = purchasesSection.IndexOf("</Item>", purchaseStart);
        if (purchaseEnd == -1) break;
        // Extract the individual purchase
        string purchase = purchasesSection.Substring(purchaseStart, (purchaseEnd + 7) - purchaseStart);
        purchases.Add(purchase);
        
        // Move to next potential purchase
        purchaseStart = purchaseEnd + 7;
    }
    return purchases;
}

public static string RemoveFlowerPurchase(string data, string flowerName, string date)//works
{
    string flowerTag = "<" + flowerName + ">";
    string purchaseTag = "<Purchase>";
    // Find the start and end of the flower section
    int flowerStart = data.IndexOf(flowerTag);
    if (flowerStart == -1)
    {
        Console.WriteLine(flowerName + " not found.");
        return data;
    }
    int flowerEnd = data.IndexOf("</" + flowerName + ">", flowerStart);
    if (flowerEnd == -1)
    {
        Console.WriteLine("End tag for " + flowerName + " not found.");
        return data;
    }
    // Extract the flower data
    string flowerData = data.Substring(flowerStart, (flowerEnd + ("</" + flowerName + ">").Length) - flowerStart);
    // Locate the purchase by date
    int purchaseStart = 0;
    while ((purchaseStart = flowerData.IndexOf(purchaseTag, purchaseStart)) != -1)
    {
        int purchaseEnd = flowerData.IndexOf("</Purchase>", purchaseStart);
        if (purchaseEnd == -1) break;
        string purchase = flowerData.Substring(purchaseStart, (purchaseEnd + 11) - purchaseStart);
        if (purchase.Contains("<Date>" + date + "</Date>"))
        {
            // Remove the purchase
            flowerData = flowerData.Remove(purchaseStart, purchase.Length);
            data = data.Remove(flowerStart, flowerEnd - flowerStart + ("</" + flowerName + ">").Length)
                        .Insert(flowerStart, flowerData);
            return data;
        }
        purchaseStart = purchaseEnd + 11;
    }
    //Console.WriteLine("Purchase with date " + date + " not found for " + flowerName + ".");
    return data;
}

public static string RemoveBouquet(string data, string flowerName)//works
{
    // Find the start and end tag for the specified flower
    string startTag = $"<{flowerName}>";
    string endTag = $"</{flowerName}>";
    int startIndex = data.IndexOf(startTag);
    int endIndex = data.IndexOf(endTag, startIndex);
    if (startIndex != -1 && endIndex != -1)
    {
        // Calculate the position where the flower data ends (after the closing tag)
        endIndex += endTag.Length; 
        // Remove the flower from the data string
        data = data.Remove(startIndex, endIndex - startIndex);
        return data;
    }
    else
    {
        Console.WriteLine($"Error: <{flowerName}> tag not found.");
        return data;
        
    }
}

public List<string> GetRecentActions(string xml)
{
    Entries.Clear();
    List<string> entries = new List<string>();

    int entryIndex = xml.IndexOf("<Entry>");
    int bouquetIndex = xml.IndexOf("<BouquetEntry>");

    while (entryIndex != -1 || bouquetIndex != -1)
    {
        // If <Entry> appears first or there are no more <BouquetEntry> tags
        if (entryIndex != -1 && (entryIndex < bouquetIndex || bouquetIndex == -1))
        {
            int endIndex = xml.IndexOf("</Entry>", entryIndex) + "</Entry>".Length;
            if (endIndex == -1) break;
            string entry = xml.Substring(entryIndex, endIndex - entryIndex);
            entries.Add(entry);
            entryIndex = xml.IndexOf("<Entry>", endIndex);
        }
        // If <BouquetEntry> appears first or there are no more <Entry> tags
        else if (bouquetIndex != -1)
        {
            int endIndex = xml.IndexOf("</BouquetEntry>", bouquetIndex) + "</BouquetEntry>".Length;
            if (endIndex == -1) break;
            string entry = xml.Substring(bouquetIndex, endIndex - bouquetIndex);
            entries.Add(entry);
            bouquetIndex = xml.IndexOf("<BouquetEntry>", endIndex);
        }
    }

    return entries;
}



public string RecentActionFirstItem(string entry) {
     string startTag = "<Name>";
      string endTag = "</Name>"; 
      int startIndex = entry.IndexOf(startTag) + startTag.Length; 
      int endIndex = entry.IndexOf(endTag);
       if (startIndex >= 0 && endIndex > startIndex) { 
        return entry.Substring(startIndex, endIndex - startIndex); 
        } 
        return null;
        }

public string RecentActionSecondItem(string entry) {
     if (entry.Contains("<Amount>")) {
         string startTag = "<Amount>"; 
         string endTag = "</Amount>"; 
         int startIndex = entry.IndexOf(startTag) + startTag.Length;
          int endIndex = entry.IndexOf(endTag); 
          if (startIndex >= 0 && endIndex > startIndex) {
             return entry.Substring(startIndex, endIndex - startIndex);
              } 
              } 
              else if (entry.Contains("<RetailPrice>")) {
                 string startTag = "<RetailPrice>"; 
                 string endTag = "</RetailPrice>"; 
                 int startIndex = entry.IndexOf(startTag) + startTag.Length;
                  int endIndex = entry.IndexOf(endTag);
                   if (startIndex >= 0 && endIndex > startIndex) { 
                    return entry.Substring(startIndex, endIndex - startIndex);
                     }
                      } 
                      return null; 
                      }

public string RecentActionThirdItem(string entry) { 
    if (entry.Contains("<Cost>")) { 
        string startTag = "<Cost>"; 
        string endTag = "</Cost>"; 
        int startIndex = entry.IndexOf(startTag) + startTag.Length;
         int endIndex = entry.IndexOf(endTag); 
         if (startIndex >= 0 && endIndex > startIndex) {
             return entry.Substring(startIndex, endIndex - startIndex);
              } 
              } 
              else if (entry.Contains("<NumberOfItems>")) { 
                string startTag = "<NumberOfItems>";
                 string endTag = "</NumberOfItems>"; 
                 int startIndex = entry.IndexOf(startTag) + startTag.Length; 
                 int endIndex = entry.IndexOf(endTag);
                  if (startIndex >= 0 && endIndex > startIndex) { 
                    return entry.Substring(startIndex, endIndex - startIndex);
                     } 
                     } 
                     return null; 
                     }

public static string RecentActionDateItem(string entry) { 
    string startTag = "<Date>"; 
    string endTag = "</Date>"; 
    int startIndex = entry.IndexOf(startTag) + startTag.Length; 
    int endIndex = entry.IndexOf(endTag);
     if (startIndex >= 0 && endIndex > startIndex) {
         return entry.Substring(startIndex, endIndex - startIndex); 
         }
          return null; 
          }

public string GrabFromData(string data, string[] tags)//Works
    {
        string currentData = data;

        foreach (string tag in tags)
        {
            int start = currentData.IndexOf("<" + tag + ">");
            int end = currentData.IndexOf("</" + tag + ">");

            if (start == -1 || end == -1)
                return "Not Found";

            currentData = currentData.Substring(start + tag.Length + 2, end - (start + tag.Length + 2));
        }
        
        return currentData;
    }
  public string ReadTxt()
    {
           List<string[]> csvData2 = new List<string[]>();

    // Locate the Documents folder
    string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
    // Build the path to the Petalytics folder and the text file
    string petalyticsFolderPath = Path.Combine(documentsPath, "Petalytics");
    string fileName = "FlowerProjectData.txt"; // File name
    string filePath = Path.Combine(petalyticsFolderPath, fileName);

    // Read the file and process its contents
    using (StreamReader reader = new StreamReader(filePath))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            string[] fields = line.Split(',');
            csvData2.Add(fields);
        }
    }

    // Combine the data into a single string for return
    foreach (var row in csvData2)
    {
        return string.Join(",", row) + "\n";
    }

    return "";
    }

     public static string ReadTxt2()
    {  List<string[]> csvData2 = new List<string[]>();

    // Locate the Documents folder
    string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
    // Build the path to the Petalytics folder and the text file
    string petalyticsFolderPath = Path.Combine(documentsPath, "Petalytics");
    string fileName = "FlowerProjectData.txt"; // File name
    string filePath = Path.Combine(petalyticsFolderPath, fileName);

    // Read the file and process its contents
    using (StreamReader reader = new StreamReader(filePath))
    {
        string line;
        while ((line = reader.ReadLine()) != null)
        {
            string[] fields = line.Split(',');
            csvData2.Add(fields);
        }
    }

    // Combine the data into a single string for return
    foreach (var row in csvData2)
    {
        return string.Join(",", row) + "\n";
    }

    return "";
    }


public string[] getRecentActionsIntegrate(){
        string[] returnThis = new string[] {};
        try{
         returnThis = GetRecentActions(ReadTxt()).ToArray();
         
        }
        catch{
            returnThis = new string[] {"Option1", "Option2","option3"};
        }
        return returnThis;
    }

  public void WriteTxt(string lines)
{
    // Locate the Documents folder
    string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
    // Build the path to the Petalytics folder and the text file
    string petalyticsFolderPath = Path.Combine(documentsPath, "Petalytics");
    string fileName = "FlowerProjectData.txt";
    string filePath = Path.Combine(petalyticsFolderPath, fileName);

    // Write the lines to the file
    using (StreamWriter writer = new StreamWriter(filePath, append: false)) // Set append to true to add to the file
    {
        
            writer.WriteLine(lines);
        
    }
}

     public static void WriteTxt2(string lines)
{
    // Locate the Documents folder
    string documentsPath = Environment.GetFolderPath(Environment.SpecialFolder.MyDocuments);
    // Build the path to the Petalytics folder and the text file
    string petalyticsFolderPath = Path.Combine(documentsPath, "Petalytics");
    string fileName = "FlowerProjectData.txt";
    string filePath = Path.Combine(petalyticsFolderPath, fileName);

    // Write the lines to the file
    using (StreamWriter writer = new StreamWriter(filePath, append: false)) // Set append to true to add to the file
    {
        
            writer.WriteLine(lines);
        
    }
}

}
